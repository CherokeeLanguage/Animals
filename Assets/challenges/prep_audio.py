#!/usr/bin/env -S conda run -n intro_to_animals python
import os
import shutil
import sys
from shutil import rmtree


def get_mp3s(base_dir: str) -> list[str]:
    mp3s = []
    for (dirpath, dirnames, filenames) in os.walk(base_dir):
        filename: str
        for filename in filenames:
            if filename.endswith(".mp3"):
                mp3s.append(os.path.join(dirpath, filename))
    mp3s.sort()
    return mp3s


def get_mp3_lookup(base_dir: str) -> dict[str, list[str]]:
    syl: dict[str, list[str]] = {}
    for (dirpath, dirnames, filenames) in os.walk(base_dir):
        lookup: dict[str, str] = {}
        filename: str
        for filename in filenames:
            if not filename.endswith(".mp3"):
                continue
            # filename = filename[:-4]
            if "-" in filename:
                rix = filename.rindex("-")
            lookup[filename[rix + 1:]] = filename
        for filename in filenames:
            if filename == "selected.txt":
                with open(os.path.join(dirpath, filename), "r") as f:
                    line: str
                    ix: int = 0
                    dupe_check: set[str] = set()
                    for line in f:
                        line = line.strip()
                        if not line:
                            continue
                        fields = line.split("|")
                        if len(fields) < 3:
                            continue
                        syllabary = fields[0]
                        if syllabary in dupe_check:
                            print(f"DUPLICATE: {line}")
                        dupe_check.add(syllabary)
                        if syllabary not in syl.keys():
                            syl[syllabary] = list()
                        if fields[2] in lookup:
                            filename = lookup[fields[2]]
                            syl[syllabary].append(filename)
                        ix += 1
    print(syl.keys())
    print(len(syl.keys()))
    return syl


if __name__ == "__main__":
    base_dir: str = os.path.dirname(os.path.realpath(__file__))
    dest: str = os.path.join(base_dir, "", "..", "audio", "challenges")
    dest_script = os.path.join(base_dir, "", "..", "scripts", "AnimalMp3s.gd")

    mp3s: dict[str, list[str]] = get_mp3_lookup(base_dir)

    rmtree(dest, ignore_errors=True)
    os.makedirs(dest, exist_ok=True)

    for mp3 in get_mp3s(base_dir):
        shutil.copy2(mp3, dest)

    with open(dest_script, "w") as f:
        f.write("extends Node\n")
        f.write("\n")
        f.write("class_name AnimalMp3s\n")
        f.write("\n")
        f.write(f"# GENERATED BY {os.path.basename(__file__)}.\n")
        f.write("# DO NOT HAND EDIT THIS FILE.\n")
        f.write(f"# {len(mp3s):,} Entries")
        f.write("\n")
        f.write("\n")
        f.write("const mp3s:Dictionary = {\n")
        first_challenge: bool = True
        for challenge in mp3s.keys():
            if first_challenge:
                first_challenge = False
            else:
                f.write(",\n")
            f.write("\t")
            f.write("\"")
            f.write(challenge)
            f.write("\": [")
            first_entry: bool = True
            for mp3 in mp3s[challenge]:
                if first_entry:
                    first_entry = False
                else:
                    f.write(", ")
                f.write("\"")
                f.write(mp3)
                f.write("\"")
            f.write("]")
        f.write("}\n\n")
